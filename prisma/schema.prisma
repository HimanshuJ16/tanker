// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }

// model User {
//   id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   fullname  String
//   clerkId   String   @unique
//   type      String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   drivers   Driver[]
//   bookings       Booking[]
//   helpRequests   HelpRequest[]
// }

// model Driver {
//   id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   firstName      String
//   lastName       String
//   licenseNumber  String    @unique
//   contactNumber  String
//   userId    String?    @db.Uuid
//   user      User?      @relation(fields: [userId], references: [id])
//   vehicles       Vehicle[]
//   trips          Trip[]
//   maintenanceJobs MaintenanceJob[]
// }

// model Vehicle {
//   id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   vehicleNumber     String    @unique
//   registrationNumber String   @unique
//   status            String
//   driverId          String    @db.Uuid
//   driver            Driver    @relation(fields: [driverId], references: [id])
//   geoServices       GeoService[]
//   maintenanceJobs   MaintenanceJob[]
// }

// model GeoService {
//   id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   name      String
//   latitude  Decimal
//   longitude Decimal
//   radius    Decimal
//   vehicleId String    @db.Uuid
//   vehicle   Vehicle   @relation(fields: [vehicleId], references: [id])
// }

// model Booking {
//   id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   userId    String    @db.Uuid
//   user      User      @relation(fields: [userId], references: [id])
//   tripId    String    @unique @db.Uuid
//   trip      Trip      @relation(fields: [tripId], references: [id])
//   createdAt  DateTime  @default(now())
//   status    String
// }

// model Trip {
//   id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   driverId  String    @db.Uuid
//   driver    Driver    @relation(fields: [driverId], references: [id])
//   booking   Booking?  
//   startDate DateTime
//   picture   String
//   endDate   DateTime
//   status    String
// }

// model HelpRequest {
//   id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   userId    String    @db.Uuid
//   user      User      @relation(fields: [userId], references: [id])
//   reportType String
//   reportDate DateTime
//   status    String
// }

// model MaintenanceJob {
//   id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   driverId    String    @db.Uuid
//   driver      Driver    @relation(fields: [driverId], references: [id])
//   vehicleId   String    @db.Uuid
//   vehicle     Vehicle   @relation(fields: [vehicleId], references: [id])
//   description String
//   scheduledDate DateTime
//   status      String
//   jobServices JobService[]
// }

// model JobService {
//   id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   maintenanceJobId String    @db.Uuid
//   maintenanceJob  MaintenanceJob @relation(fields: [maintenanceJobId], references: [id])
//   serviceType     String
//   status          String
// }

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fullname       String
  clerkId        String   @unique
  type           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  vehicles       Vehicle[]
  drivers        Driver[]
  customers      Customer[]
  reports        Report[]
}

model Customer {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  contactName  String?
  email        String?   @unique
  contactNumber        String?
  address      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String?  @db.Uuid
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  trips        Trip[]
}

model Vehicle {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vehicleNumber String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  trips        Trip[]
  driver       Driver?  @relation(fields: [driverId], references: [id], onDelete: Cascade)
  driverId     String?  @db.Uuid
  userId       String?  @db.Uuid
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  reports      Report[]
}

model Driver {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName String
  lastName  String
  licenseNumber   String   @unique
  contactNumber     String
  status    String?  @default("active")   // e.g., "active", "on_leave", "terminated"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId       String?  @db.Uuid
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicles  Vehicle[]
  trips     Trip[]
}

model Trip {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  startTime  DateTime
  endTime    DateTime?
  distance   Float?
  status     String   // e.g., "in_progress", "completed", "cancelled"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId  String   @db.Uuid
  driver     Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)
  driverId   String   @db.Uuid
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String   @db.Uuid
  locations  GpsLocation[]
  reports    Report[]
}

model GpsLocation {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  latitude  Float
  longitude Float
  altitude  Float?
  speed     Float?
  heading   Float?
  timestamp DateTime
  createdAt DateTime @default(now())
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId    String    @db.Uuid
}

model Report {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  reportType       String   // e.g., "daily", "weekly", "monthly"
  startDate        DateTime
  endDate          DateTime
  totalDistance    Float
  totalTrips       Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  vehicle          Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId        String   @db.Uuid
  trips            Trip[]
  generatedBy      User     @relation(fields: [generatedByUserId], references: [id], onDelete: Cascade)
  generatedByUserId String   @db.Uuid
}